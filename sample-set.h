// sample-set.h -- Set of samples
//
//  Copyright (C) 2010  Miles Bader <miles@gnu.org>
//
// This source code is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 3, or (at
// your option) any later version.  See the file COPYING for more details.
//
// Written by Miles Bader <miles@gnu.org>
//

#ifndef __SAMPLE_SET_H__
#define __SAMPLE_SET_H__

#include <vector>

#include "sample-gen.h"


namespace snogray {


// A set of samples.  There are zero or more channels, each holding the
// same number of samples.  Each channel has samples generated by the same
// generator, but the channels are explicitly de-correlated from each other
// by randomly shuffling the samples in each channel after generation.
//
class SampleSet
{
public:

  // A single sample channel.  Sample channels are typed, so they can only
  // contain a single type of sample (the available types of samples are
  // restricted to whatever the sample generator can generate).
  //
  template<typename T>
  class Channel
  {
  public:

    // Default constructor zero-initializes, hopefully resulting in a
    // segfault if an otherwise uninitialized channel is used by mistake.
    //
    Channel () : table (0) {}

    // Copy constructor
    //
    Channel (const Channel &from) : table (from.table) {}

  private:

    Channel (const std::vector<T> *_table) : table (_table) {}

    friend class SampleSet;
    const std::vector<T> *table;
  };


  // Construct a new sample set, using the specified sample generator.
  //
  SampleSet (SampleGen &_gen) : gen (_gen) {}

  ~SampleSet ();


  // Return sample NUM from the sample channel CHANNEL.
  //
  template<typename T>
  T get (Channel<T> channel, unsigned num) { return table (channel) [num]; }

  // Allocate a new sample-channel in this set.  The type of sample must be
  // specified as the first template parameter.
  //
  template<typename T>
  Channel<T> add_channel ()
  {
    std::vector<T> *table = gen.gen_shuffled_samples<T> ();
    add_table (table);
    return Channel<T> (table);
  }

private:

  template<typename T>
  const std::vector<T> &table (Channel<T> channel) { return *channel.table; }
  
  // Just adds TABLE to our list of tables; out-of-line to avoid bloat.
  //
  template<typename T>
  void add_table (std::vector<T> *table);

  std::vector<std::vector<float> *> float_tables;
  std::vector<std::vector<UV> *> uv_tables;

  SampleGen &gen;
};


//
// Declarations for specialized SampleSet::add_table methods.
//

template<>
void
SampleSet::add_table (std::vector<float> *table);

template<>
void
SampleSet::add_table<UV> (std::vector<UV> *table);


}

#endif // __SAMPLE_SET_H__
